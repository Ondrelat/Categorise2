// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                         String                      @id @default(cuid())
  name                       String?
  email                      String?                     @unique
  emailVerified              DateTime?
  password                   String?
  image                      String?
  score                      String?
  accounts                   Account[]
  tutorials                  Tutorial[]
  sessions                   Session[]
  revisions                  Revision[]
  comments                   Comment[]
  discussions                Discussion[]
  lists                      UserList[]
  articleClassementUserDatas ArticleClassementUserData[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Categories {
  id                 String                      @id @default(uuid())
  name               String
  description        String
  parentId           String?
  updatedAt          DateTime                    @updatedAt
  isActive           Boolean                     @default(true)
  parent             Categories?                 @relation("CategoryToCategory", fields: [parentId], references: [id])
  children           Categories[]                @relation("CategoryToCategory")
  discussions        Discussion[]
  tutorials          Tutorial[]
  userLists          UserList[]
  articlesClassement ArticleClassementCategory[]
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  REVIEW
}

enum ArticleLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Tutorial {
  id         String         @id @default(uuid())
  title      String?
  content    String
  slug       String?        @unique
  imageUrl   String?
  type       String
  status     ArticleStatus? @default(DRAFT)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  categoryId String
  isActive   Boolean        @default(true)
  level      ArticleLevel?

  userId String

  user User @relation(fields: [userId], references: [id])

  category  Categories @relation(fields: [categoryId], references: [id])
  revisions Revision[]

  // Relations pour les prérequis
  prerequisites     Tutorial[] @relation("TutorialPrerequisites")
  isPrerequisiteFor Tutorial[] @relation("TutorialPrerequisites")

  // Relations pour les suites
  nextTutorials     Tutorial[] @relation("TutorialNext")
  previousTutorials Tutorial[] @relation("TutorialNext")

  @@unique([categoryId, level]) // ✅ la ligne clé
  @@map("tutorials")
}

model Discussion {
  id         String   @id @default(uuid())
  title      String?
  content    String
  imageUrl   String?
  type       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  categoryId String
  isActive   Boolean  @default(true)
  userId     String

  user     User       @relation(fields: [userId], references: [id])
  category Categories @relation(fields: [categoryId], references: [id])
  comments Comment[]

  @@map("discussions")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  userId    String

  user         User        @relation(fields: [userId], references: [id])
  Discussion   Discussion? @relation(fields: [discussionId], references: [id])
  discussionId String?

  @@map("comments")
}

model Revision {
  id          String   @id @default(uuid())
  tutorialId  String
  userId      String
  contentJson Json
  comment     String?
  createdAt   DateTime @default(now())

  tutorial Tutorial @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])

  @@index([tutorialId])
  @@index([userId])
  @@map("revisions")
}

model ArticleClassement {
  id                String   @id @default(uuid())
  tconst            String?
  averageRatingIMDB Float?
  numVotesIMDB      Int?
  primary_title     String?
  titre_original    String?
  titre_fr          String?
  titre_en          String?
  createdAt         DateTime @default(now())
  image_url         String?
  duration          String?
  endYear           Int?
  genres            String?
  startYear         Int?
  titleType         String?

  categories                 ArticleClassementCategory[]
  articleClassementUserLists ArticleClassementUserList[]
  articleClassementUserDatas ArticleClassementUserData[]

  @@map("article_classement")
}

model ArticleClassementUserList {
  id         String  @id @default(cuid())
  articleId  String
  categoryId String?
  listId     String?
  userId     String

  article ArticleClassement @relation(fields: [articleId], references: [id])
  list    UserList?         @relation(fields: [listId], references: [id])

  rank         Int?
  rankTierList String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([listId, articleId]) // <= clé unique composée Il ne peut avoir qu'une fois un même article dans une liste
}

model ArticleClassementUserData {
  id        String @id @default(cuid())
  articleId String
  userId    String

  article ArticleClassement @relation(fields: [articleId], references: [id])
  user    User              @relation(fields: [userId], references: [id])

  liked  Boolean?
  rating Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([articleId, userId]) // <= clé unique composée Il ne peut avoir qu'une fois un même article dans une liste
}

model UserList {
  id         String  @id @default(cuid())
  name       String
  userId     String
  categoryId String?

  user                       User                        @relation(fields: [userId], references: [id])
  articleClassementUserLists ArticleClassementUserList[]

  category Categories? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([categoryId, userId]) // <= clé unique composée clé unique composée Si il y a une category, on est en mode normalList, alors il ne peut y avoir qu'un même article par category
}

model ArticleClassementCategory {
  articleId  String
  categoryId String

  article  ArticleClassement @relation(fields: [articleId], references: [id])
  category Categories        @relation(fields: [categoryId], references: [id])

  @@id([articleId, categoryId])
}

/**
 * model Tag {
 * id          String  @id @default(uuid())
 * name        String  @unique
 * description String?
 * articles ArticleTag[]
 * @@map("tags")
 * }
 * /** * model ArticleTag {
 * articleId String
 * tagId     String
 * article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
 * tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
 * @@id([articleId, tagId])
 * @@index([articleId])
 * @@index([tagId])
 * @@map("article_tags")
 * }
 */
