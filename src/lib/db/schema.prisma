// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId]) // <-- OPTIMISATION: Accélère la recherche des comptes par utilisateur.
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // <-- OPTIMISATION: Accélère la recherche des sessions par utilisateur.
}

model User {
  id                         String                      @id @default(cuid())
  name                       String?
  email                      String?                     @unique
  emailVerified              DateTime?
  password                   String?
  image                      String?
  score                      String?
  accounts                   Account[]
  tutorials                  Tutorial[]
  sessions                   Session[]
  revisions                  Revision[]
  comments                   Comment[]
  discussions                Discussion[]
  lists                      UserList[]
  articleClassementUserDatas ArticleClassementUserData[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Categories {
  id          String    @id @default(uuid())
  name        String?
  name_en     String?
  slug        String?   @unique
  imageUrl    String?
  createdAt   DateTime? @default(now())
  description String
  parentId    String?
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)

  // Relations
  parent             Categories?                 @relation("CategoryToCategory", fields: [parentId], references: [id])
  children           Categories[]                @relation("CategoryToCategory")
  discussions        Discussion[]
  tutorials          Tutorial[]
  userLists          UserList[]
  articlesClassement ArticleClassementCategory[]

  // VOS INDEX EXISTANTS SONT BONS, JE LES LAISSE
  @@index([parentId, isActive, id], name: "idx_categories_recursive_cte")
  @@index([parentId, isActive], name: "idx_categories_root_active")
  @@index([name, isActive], name: "idx_categories_name_active") // <-- OPTIMISATION: Parfait pour vos requêtes.
  @@index([slug, isActive], name: "idx_categories_slug_active")
  @@index([id, isActive], name: "idx_categories_stats")
  @@index([updatedAt, isActive], name: "idx_categories_updated_active")
  @@index([isActive, parentId, name, id], name: "idx_categories_covering")
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  REVIEW
}

enum ArticleLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

model Tutorial {
  id          String         @id @default(uuid())
  title       String?
  content     String?
  contentJson Json?
  slug        String?        @unique
  imageUrl    String?
  type        String
  status      ArticleStatus? @default(DRAFT)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  categoryId  String
  isActive    Boolean        @default(true)
  level       ArticleLevel?
  userId      String

  user      User       @relation(fields: [userId], references: [id])
  category  Categories @relation(fields: [categoryId], references: [id])
  revisions Revision[]

  prerequisites     Tutorial[] @relation("TutorialPrerequisites")
  isPrerequisiteFor Tutorial[] @relation("TutorialPrerequisites")
  nextTutorials     Tutorial[] @relation("TutorialNext")
  previousTutorials Tutorial[] @relation("TutorialNext")

  @@unique([categoryId, level])
  @@index([categoryId]) // <-- OPTIMISATION: Accélère la recherche de tutos par catégorie.
  @@index([userId]) // <-- OPTIMISATION: Accélère la recherche de tutos par utilisateur.
  @@map("tutorials")
}

model Discussion {
  id          String   @id @default(uuid())
  title       String?
  content     String?
  contentJson Json?
  imageUrl    String?
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  String
  isActive    Boolean  @default(true)
  userId      String

  user     User       @relation(fields: [userId], references: [id])
  category Categories @relation(fields: [categoryId], references: [id])
  comments Comment[]

  @@index([categoryId]) // <-- OPTIMISATION: Accélère la recherche de discussions par catégorie.
  @@index([userId]) // <-- OPTIMISATION: Accélère la recherche de discussions par utilisateur.
  @@map("discussions")
}

model Comment {
  id           String   @id @default(uuid())
  content      String?
  contentJson  Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isActive     Boolean  @default(true)
  userId       String
  discussionId String?
  parentId     String? // ID du commentaire parent, s'il s'agit d'une réponse

  user       User        @relation(fields: [userId], references: [id])
  Discussion Discussion? @relation(fields: [discussionId], references: [id])
  parent     Comment?    @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[]   @relation("CommentReplies")

  @@index([discussionId]) // <-- OPTIMISATION: Accélère la recherche des commentaires d'une discussion.
  @@index([userId]) // <-- OPTIMISATION: Accélère la recherche des commentaires d'un utilisateur.
  @@map("comments")
}

model Revision {
  id          String   @id @default(uuid())
  tutorialId  String
  userId      String
  contentJson Json
  comment     String?
  createdAt   DateTime @default(now())

  tutorial Tutorial @relation(fields: [tutorialId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id])

  @@index([tutorialId])
  @@index([userId])
  @@map("revisions")
}

model ArticleClassement {
  id                String   @id @default(uuid())
  tconst            String?
  averageRatingIMDB Float?
  numVotesIMDB      Int?
  primary_title     String?
  titre_original    String?
  titre_fr          String?
  titre_en          String?
  createdAt         DateTime @default(now())
  image_url         String?
  duration          String?
  endYear           Int?
  genres            String?
  startYear         Int?
  titleType         String?

  categories                 ArticleClassementCategory[]
  articleClassementUserLists ArticleClassementUserList[]
  articleClassementUserDatas ArticleClassementUserData[]

  // <-- OPTIMISATION MAJEURE: Cet index couvre le tri ET le filtre de votre requête principale.
  // Il accélère `ORDER BY averageRatingIMDB DESC` pour les articles ayant `numVotesIMDB > x`.
  @@index([averageRatingIMDB(sort: Desc), numVotesIMDB])
  @@map("article_classement")
}

model ArticleClassementUserList {
  id           String   @id @default(cuid())
  articleId    String
  categoryId   String?
  listId       String?
  userId       String
  rank         Int?
  rankTierList String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  article ArticleClassement @relation(fields: [articleId], references: [id])
  list    UserList?         @relation(fields: [listId], references: [id])

  @@unique([listId, articleId])
  // <-- OPTIMISATION MAJEURE: Cet index couvre le filtre par utilisateur ET le tri de sa liste.
  // C'est l'index le plus important pour la performance des classements personnalisés.
  @@index([userId, rank, createdAt(sort: Desc)])
  @@index([articleId]) // <-- OPTIMISATION: Accélère les jointures sur l'article.
  @@index([listId]) // <-- OPTIMISATION: Accélère les jointures sur la liste.
}

model ArticleClassementUserData {
  id        String   @id @default(cuid())
  articleId String
  userId    String
  liked     Boolean?
  rating    Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article ArticleClassement @relation(fields: [articleId], references: [id])
  user    User              @relation(fields: [userId], references: [id])

  // L'index unique suivant est parfait pour la jointure LEFT JOIN que vous faites.
  // Il permet de trouver très vite les données d'un user pour un article.
  @@unique([articleId, userId])
}

model UserList {
  id         String   @id @default(cuid())
  name       String
  userId     String
  categoryId String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user                       User                        @relation(fields: [userId], references: [id])
  articleClassementUserLists ArticleClassementUserList[]
  category                   Categories?                 @relation(fields: [categoryId], references: [id])

  // La clé unique est bonne si un user ne peut avoir qu'une liste par catégorie
  @@unique([categoryId, userId])
  // <-- OPTIMISATION: Accélère la recherche des listes d'un utilisateur,
  // indépendamment de la catégorie.
  @@index([userId])
}

model ArticleClassementCategory {
  articleId  String
  categoryId String

  article  ArticleClassement @relation(fields: [articleId], references: [id])
  category Categories        @relation(fields: [categoryId], references: [id])

  @@id([articleId, categoryId])
  // <-- OPTIMISATION: Accélère la recherche de tous les articles dans une catégorie
  // et les opérations de type `getMissingArticleTypes`.
  @@index([categoryId])
}
