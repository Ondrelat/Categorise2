generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?   // Ajoutez ce champ
  image         String?
  score         String?
  accounts      Account[]
  sessions      Session[]
  createdArticles Article[]  @relation("ArticleAuthor") // ✓ C'est correct
    revisions     Revision[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model Categories {
  id          String    @id @default(uuid())
  name        String
  description String
  parentId    String?   // Optional parent category reference
  updatedAt   DateTime  @updatedAt
  isActive    Boolean   @default(true)
  parent      Categories? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Categories[] @relation("CategoryToCategory")
  articles    Article[]   // Ajout de la relation reverse
}

model Article {
  id              String          @id @default(uuid())
  slug            String?         @unique // URL-friendly pour wiki
  title           String
  summary         String?         @db.Text
  content         String?         @db.Text // Pour compatibilité avec ancien modèle
  imageUrl        String?
  type            String?         // Type d'article (standard, wiki, etc.)
  status          ArticleStatus?  @default(DRAFT)
  viewCount       Int?            @default(0)
  categoryId      String?
  authorId        String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  isActive        Boolean         @default(true)
  
  // Relations
  category        Categories?     @relation(fields: [categoryId], references: [id])
  author          User?           @relation("ArticleAuthor", fields: [authorId], references: [id])
  sections        Section[]
  revisions       Revision[]
  tableOfContents TableOfContents[]
  references      Reference[]
  redirects       Redirect[]      @relation("TargetArticle")
  comments        Comment[]
  tags            ArticleTag[]

  // Relation many-to-many directe entre articles
  relatedTo       Article[]       @relation("RelatedArticles")
  relatedFrom     Article[]       @relation("RelatedArticles")
  
  @@index([slug])
  @@map("articles")
}

model ArticleClassement {
  id      String    @id @default(uuid())
  tconst           String?
  averageRatingIMDB Float?
  numVotesIMDB      Int?
  titre_fr         String? 
  titre_en         String? 
  image_url        String?
  createdAt        DateTime  @default(now())
  titleType        String?
  genres           String?
  startYear        Int?
  endYear          Int?
  duration         String?
   @@map("article_classement") 
}

model Section {
  id              String          @id @default(uuid())
  articleId       String
  parentSectionId String?
  title           String
  position        Int
  level           Int             @default(1)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  article         Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  parentSection   Section?        @relation("SectionHierarchy", fields: [parentSectionId], references: [id])
  childSections   Section[]       @relation("SectionHierarchy")
  contentBlocks   ContentBlock[]
  tableOfContents TableOfContents[]
  
  @@index([articleId])
  @@index([parentSectionId])
  @@map("sections")
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  REVIEW
}

model ContentBlock {
  id              String          @id @default(uuid())
  sectionId       String
  contentType     String          // paragraph, list, quote, code, image, etc.
  content         String          @db.Text
  position        Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  section         Section         @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  contentReferences ContentReference[]
  
  @@index([sectionId])
  @@map("content_blocks")
}

model TableOfContents {
  id              String          @id @default(uuid())
  articleId       String
  sectionId       String
  displayText     String
  position        Int
  level           Int             @default(1)
  createdAt       DateTime        @default(now())
  article         Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  section         Section         @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  @@index([articleId])
  @@map("table_of_contents")
}

model Reference {
  id              String          @id @default(uuid())
  articleId       String
  citation        String          @db.Text
  url             String?
  createdAt       DateTime        @default(now())
  article         Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  contentReferences ContentReference[]
  
  @@map("references")
}

model ContentReference {
  id              String          @id @default(uuid())
  blockId         String
  referenceId     String
  position        Int
  contentBlock    ContentBlock    @relation(fields: [blockId], references: [id], onDelete: Cascade)
  reference       Reference       @relation(fields: [referenceId], references: [id], onDelete: Cascade)
  
  @@index([blockId])
  @@index([referenceId])
  @@map("content_references")
}

model Revision {
  id              String          @id @default(uuid())
  articleId       String
  userId          String
  contentJson     Json            // État complet de l'article en JSON
  comment         String?
  createdAt       DateTime        @default(now())
  article         Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id])
  
  @@index([articleId])
  @@map("revisions")
}

model Redirect {
  id              String          @id @default(uuid())
  sourceSlug      String          @unique
  targetArticleId String
  createdAt       DateTime        @default(now())
  targetArticle   Article         @relation("TargetArticle", fields: [targetArticleId], references: [id], onDelete: Cascade)
  
  @@map("redirects")
}

model Comment {
  id              String          @id @default(uuid())
  articleId       String
  userId          String
  content         String          @db.Text
  createdAt       DateTime        @default(now())
  article         Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id])
  
  @@map("comments")
}

model Tag {
  id              String          @id @default(uuid())
  name            String          @unique
  description     String?
  articles        ArticleTag[]
  
  @@map("tags")
}

model ArticleTag {
  articleId       String
  tagId           String
  article         Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag             Tag             @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([articleId, tagId])
  @@map("article_tags")
}

