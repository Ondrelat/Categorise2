// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  score         String?
  accounts      Account[]
  sessions      Session[]
  revisions     Revision[]
  comments      Comment[]
  lists         UserList[]
  articleClassementUserDatas ArticleClassementUserData[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Categories {
  id          String       @id @default(uuid())
  name        String
  description String
  parentId    String?
  updatedAt   DateTime     @updatedAt
  isActive    Boolean      @default(true)
  parent      Categories?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Categories[] @relation("CategoryToCategory")
  articles    Article[]
  userLists   UserList[]
  articlesClassement  ArticleClassementCategory[]
  articleReferences   ArticleReference[] @relation("CategoryArticleReference")
}

enum ArticleReferenceType {
  PREREQUISITE
  COURSE_PART
}

enum ArticleLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  REVIEW
}

model Article {
  id                 String            @id @default(uuid())
  title              String
  content            String
  slug               String?           @unique
  imageUrl           String?
  type               String
  status             ArticleStatus?     @default(DRAFT)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  categoryId         String
  isActive           Boolean           @default(true)
  level              ArticleLevel?
  
  category           Categories        @relation(fields: [categoryId], references: [id])
  sections           Section[]
  tableOfContents    TableOfContents[]
  references         Reference[]
  revisions          Revision[]
  redirectsTo        Redirect[]        @relation("TargetArticle")
  comments           Comment[]
  articleTags        ArticleTag[]
  referencedIn       ArticleReference[] @relation("ReferencedArticle")
  referencesTo       ArticleReference[] @relation("SourceArticle")

  @@map("articles")
}

model ArticleReference {
  id                String               @id @default(uuid())
  sourceArticleId   String
  targetArticleId   String
  referenceType     ArticleReferenceType
  description       String?
  createdAt         DateTime             @default(now())
  categoryId        String?
  
  sourceArticle     Article              @relation("SourceArticle", fields: [sourceArticleId], references: [id], onDelete: Cascade)
  targetArticle     Article              @relation("ReferencedArticle", fields: [targetArticleId], references: [id], onDelete: Cascade)
  category          Categories?          @relation("CategoryArticleReference", fields: [categoryId], references: [id])
  
  @@unique([sourceArticleId, targetArticleId, referenceType])
  @@index([sourceArticleId])
  @@index([targetArticleId])
  @@map("article_references")
}

model ArticleClassement {
  id                String   @id @default(uuid())
  tconst            String?
  averageRatingIMDB Float?
  numVotesIMDB      Int?
  primary_title     String?
  titre_original    String?
  titre_fr          String?
  titre_en          String?
  createdAt         DateTime @default(now())
  image_url         String?
  duration          String?
  endYear           Int?
  genres            String?
  startYear         Int?
  titleType         String?

  categories ArticleClassementCategory[]
  articleClassementUserLists ArticleClassementUserList[]
  articleClassementUserDatas ArticleClassementUserData[]

  @@map("article_classement")
}

model ArticleClassementUserList {
  id            String   @id @default(cuid())
  articleId     String
  categoryId    String?
  listId        String?
  userId        String

  article       ArticleClassement @relation(fields: [articleId], references: [id])
  list          UserList? @relation(fields: [listId], references: [id])

  rank          Int?
  rankTierList  String?       

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([listId, articleId])  // <= clé unique composée Il ne peut avoir qu'une fois un même article dans une liste
}

model ArticleClassementUserData {
  id            String   @id @default(cuid())
  articleId     String
  userId        String

  article       ArticleClassement @relation(fields: [articleId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  liked         Boolean?  
  rating        Float?      

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([articleId, userId])  // <= clé unique composée Il ne peut avoir qu'une fois un même article dans une liste

}



model UserList {
  id            String   @id @default(cuid())
  name          String
  userId        String
  categoryId    String?
  
  user          User     @relation(fields: [userId], references: [id])
  articleClassementUserLists  ArticleClassementUserList[]
  
  category      Categories? @relation(fields: [categoryId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  
  @@unique([categoryId, userId])  // <= clé unique composée clé unique composée Si il y a une category, on est en mode normalList, alors il ne peut y avoir qu'un même article par category
}

model ArticleClassementCategory {
  articleId   String
  categoryId  String

  article     ArticleClassement @relation(fields: [articleId], references: [id])
  category    Categories         @relation(fields: [categoryId], references: [id])

  @@id([articleId, categoryId])
}

model Section {
  id              String          @id @default(uuid())
  articleId       String
  parentSectionId String?
  title           String
  position        Int
  level           Int             @default(1)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  article         Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  parentSection   Section?        @relation("SectionHierarchy", fields: [parentSectionId], references: [id])
  childSections   Section[]       @relation("SectionHierarchy")
  contentBlocks   ContentBlock[]
  tableOfContents TableOfContents[]
  
  @@index([articleId])
  @@index([parentSectionId])
  @@map("sections")
}

model ContentBlock {
  id                 String            @id @default(uuid())
  sectionId          String
  contentType        String
  content            String            @db.Text
  position           Int
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  
  section            Section           @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  contentReferences  ContentReference[]
  
  @@index([sectionId])
  @@map("content_blocks")
}

model TableOfContents {
  id              String          @id @default(uuid())
  articleId       String
  sectionId       String
  displayText     String
  position        Int
  level           Int             @default(1)
  createdAt       DateTime        @default(now())
  
  article         Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  section         Section         @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  @@index([articleId])
  @@index([sectionId])
  @@map("table_of_contents")
}

model Reference {
  id                 String            @id @default(uuid())
  articleId          String
  citation           String            @db.Text
  url                String?
  createdAt          DateTime          @default(now())
  
  article            Article           @relation(fields: [articleId], references: [id], onDelete: Cascade)
  contentReferences  ContentReference[]
  
  @@index([articleId])
  @@map("references")
}

model ContentReference {
  id              String          @id @default(uuid())
  blockId         String
  referenceId     String
  position        Int
  
  contentBlock    ContentBlock    @relation(fields: [blockId], references: [id], onDelete: Cascade)
  reference       Reference       @relation(fields: [referenceId], references: [id], onDelete: Cascade)
  
  @@index([blockId])
  @@index([referenceId])
  @@map("content_references")
}

model Revision {
  id              String          @id @default(uuid())
  articleId       String
  userId          String
  contentJson     Json
  comment         String?
  createdAt       DateTime        @default(now())
  
  article         Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id])
  
  @@index([articleId])
  @@index([userId])
  @@map("revisions")
}

model Redirect {
  id              String          @id @default(uuid())
  sourceSlug      String          @unique
  targetArticleId String
  createdAt       DateTime        @default(now())
  
  targetArticle   Article         @relation("TargetArticle", fields: [targetArticleId], references: [id], onDelete: Cascade)
  
  @@index([targetArticleId])
  @@map("redirects")
}

model Comment {
  id              String          @id @default(uuid())
  articleId       String
  userId          String
  content         String          @db.Text
  createdAt       DateTime        @default(now())
  
  article         Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id])
  
  @@index([articleId])
  @@index([userId])
  @@map("comments")
}

model Tag {
  id              String          @id @default(uuid())
  name            String          @unique
  description     String?
  
  articles        ArticleTag[]
  
  @@map("tags")
}

model ArticleTag {
  articleId       String
  tagId           String
  
  article         Article         @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag             Tag             @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([articleId, tagId])
  @@index([articleId])
  @@index([tagId])
  @@map("article_tags")
}