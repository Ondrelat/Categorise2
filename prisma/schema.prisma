generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  score         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Categories {
  id          String       @id @default(uuid())
  name        String
  description String
  parentId    String?
  updatedAt   DateTime     @updatedAt
  isActive    Boolean      @default(true)
  parent      Categories?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Categories[] @relation("CategoryToCategory")
  articles    Article[]
}

model Article {
  id         String     @id @default(uuid())
  title      String
  content    String
  imageUrl   String?
  type       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  categoryId String
  isActive   Boolean    @default(true)
  category   Categories @relation(fields: [categoryId], references: [id])

  @@map("articles")
}

model ArticleClassement {
  id                String   @id @default(uuid())
  tconst            String?
  averageRatingIMDB Float?
  numVotesIMDB      Int?
  titre_fr          String?
  titre_en          String?
  createdAt         DateTime @default(now())
  image_url         String?
  duration          String?
  endYear           Int?
  genres            String?
  startYear         Int?
  titleType         String?

  @@map("article_classement")
}
